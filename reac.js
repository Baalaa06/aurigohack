import React, { useState } from "react";
import './styles.css';

// Mock Data for the application (just for demo)
const initialData = {
  temperature: 25, // In ¬∞C
  humidity: 60, // In %
  hazards: ["Gas Leak", "High Winds"],
  emergencyStatus: "Standby", // "Standby", "Alerted"
};

const translations = {
  english: {
    login: "Login",
    username: "Username",
    password: "Password",
    welcome: "Welcome",
    worker: "Worker",
    supervisor: "Supervisor",
    currentStatus: "Current Site Status",
    temperature: "Temperature",
    humidity: "Humidity",
    hazards: "Hazards",
    emergencyStatus: "Emergency Status",
    postMessage: "Post a Message to Workers",
    enterMessage: "Enter message",
    emergencyAlert: "Trigger Emergency Alert",
    emergencyForm: "Emergency Alert Form",
    notifyEmergency: "Yes, Notify!",
      
    cancel: "Cancel",
    logout: "Logout",
  },
  hindi: {
    login: "‡§≤‡•â‡§ó‡§ø‡§®",
    username: "‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡§æ‡§Æ",
    password: "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°",
    welcome: "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à",
    worker: "‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä",
    supervisor: "‡§™‡§∞‡•ç‡§Ø‡§µ‡•á‡§ï‡•ç‡§∑‡§ï",
    currentStatus: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡§æ‡§á‡§ü ‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
    temperature: "‡§§‡§æ‡§™‡§Æ‡§æ‡§®",
    humidity: "‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ",
    hazards: "‡§ñ‡§§‡§∞‡•á",
    emergencyStatus: "‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
    postMessage: "‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç",
    enterMessage: "‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    emergencyAlert: "‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§ú‡§æ‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç",
    emergencyForm: "‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§´‡•â‡§∞‡•ç‡§Æ",
    notifyEmergency: "‡§π‡§æ‡§Å, ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç!",
    cancel: "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    logout: "‡§≤‡•â‡§ó‡§Ü‡§â‡§ü",
  },
  tamil: {
    login: "‡Æâ‡Æ≥‡Øç‡Æ®‡ØÅ‡Æ¥‡Øà‡Æµ‡ØÅ",
    username: "‡Æ™‡ÆØ‡Æ©‡Æ∞‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç",
    password: "‡Æï‡Æü‡Æµ‡ØÅ‡Æö‡Øç‡Æö‡ØÜ‡Ææ‡Æ≤‡Øç",
    welcome: "‡Æµ‡Ææ‡Æô‡Øç‡Æï",
    worker: "‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Ææ‡Æ≥‡Æ∞‡Øç",
    supervisor: "‡ÆÜ‡ÆØ‡Øç‡Æµ‡Ææ‡Æ≥‡Æ∞‡Øç",
    currentStatus: "‡Æ§‡Æ±‡Øç‡Æ™‡Øã‡Æ§‡Øà‡ÆØ ‡Æ®‡Æø‡Æ≤‡Øà",
    temperature: "‡Æ§‡Ææ‡Æ™‡Æ®‡Æø‡Æ≤‡Øà",
    humidity: "‡Æâ‡Æ∞‡ØÅ‡Æï‡Æ≤‡Øç",
    hazards: "‡ÆÜ‡Æ™‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øç",
    emergencyStatus: "‡ÆÖ‡Æµ‡Æö‡Æ∞ ‡Æ®‡Æø‡Æ≤‡Øà",
    postMessage: "‡Æ™‡Æ£‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡Æø ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡Æµ‡ØÅ‡ÆÆ‡Øç",
    enterMessage: "‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡Æø ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç",
    emergencyAlert: "‡ÆÖ‡Æµ‡Æö‡Æ∞ ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
    emergencyForm: "‡ÆÖ‡Æµ‡Æö‡Æ∞ ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æ™‡Æü‡Æø‡Æµ‡ÆÆ‡Øç",
    notifyEmergency: "‡ÆÜ‡ÆÆ‡Øç, ‡ÆÖ‡Æ±‡Æø‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç!",
    cancel: "‡Æ∞‡Æ§‡Øç‡Æ§‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç",
    logout: "‡Æµ‡ØÜ‡Æ≥‡Æø‡ÆØ‡Øá‡Æ±‡ØÅ",
  },
  malayalam: {
    login: "‡¥≤‡µã‡¥ó‡¥ø‡µª",
    username: "‡¥â‡¥™‡¥Ø‡µã‡¥ï‡µç‡¥§‡µÉ‡¥®‡¥æ‡¥Æ‡¥Ç",
    password: "‡¥™‡¥æ‡¥∏‡µç‡¥µ‡µá‡¥°‡µç",
    welcome: "‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç",
    worker: "‡¥ï‡µÉ‡¥§‡µç‡¥Ø‡¥Æ‡¥æ‡¥Ø ‡¥ú‡µã‡¥≤‡¥ø",
    supervisor: "‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥®‡¥ï‡µç‡¥ï‡¥æ‡¥∞‡µª",
    currentStatus: "‡¥®‡¥ø‡¥≤‡¥µ‡¥ø‡¥≤‡µÜ ‡¥∏‡µà‡¥±‡µç‡¥±‡µç ‡¥∏‡µç‡¥•‡¥ø‡¥§‡¥ø‡¥µ‡¥ø‡¥µ‡¥∞‡¥Ç",
    temperature: "‡¥ö‡µÇ‡¥ü‡µç",
    humidity: "‡¥Ü‡µº‡¥¶‡µç‡¥∞‡¥§",
    hazards: "‡¥™‡¥ï‡¥ü‡¥ô‡µç‡¥ô‡µæ",
    emergencyStatus: "‡¥Ö‡¥µ‡¥∏‡¥∞ ‡¥∏‡µç‡¥•‡¥ø‡¥§‡¥ø",
    postMessage: "‡¥ï‡¥æ‡µº‡¥Æ‡µç‡¥Æ‡¥ø‡¥ï‡µº‡¥ï‡µç‡¥ï‡¥æ‡¥Ø‡¥ø ‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç ‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï",
    enterMessage: "‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï",
    emergencyAlert: "‡¥Ö‡¥µ‡¥∏‡¥∞ ‡¥é‡¥ï‡µç‡¥ï‡¥æ‡¥§‡µç‡¥§ alert",
    emergencyForm: "‡¥Ö‡¥µ‡¥∏‡¥∞ ‡¥é‡¥ï‡µç‡¥ï‡¥æ‡¥§‡µç‡¥§ ‡¥´‡µã‡¥Ç",
    notifyEmergency: "‡¥Ö‡¥§‡µÜ, ‡¥Ö‡¥±‡¥ø‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï!",
    cancel: "‡¥±‡¥¶‡µç‡¥¶‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï",
    logout: "‡¥≤‡µã‡¥ó‡µç ‡¥î‡¥ü‡µç‡¥ü‡µç",
  },
  kannada: {
    login: "‡≤≤‡≤æ‡≤ó‡≤ø‡≤®‡≥ç",
    username: "‡≤¨‡≤≥‡≤ï‡≥Ü‡≤¶‡≤æ‡≤∞ ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å",
    password: "‡≤ó‡≥Å‡≤™‡≥ç‡≤§‡≤™‡≤¶",
    welcome: "‡≤∏‡≥ç‡≤µ‡≤æ‡≤ó‡≤§",
    worker: "‡≤∂‡≥ç‡≤∞‡≤Æ‡≤ø‡≤ï",
    supervisor: "‡≤Ü‡≤ß‡≤ø‡≤ï‡≤æ‡≤∞‡≤ø",
    currentStatus: "‡≤™‡≥ç‡≤∞‡≤∏‡≥ç‡≤§‡≥Å‡≤§ ‡≤∏‡≥à‡≤ü‡≥ç ‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø",
    temperature: "‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤®",
    humidity: "‡≤Ü‡≤∞‡≥ç‡≤¶‡≥ç‡≤∞‡≤§‡≥Ü",
    hazards: "‡≤Ü‡≤™‡≤§‡≥ç‡≤§‡≥Å",
    emergencyStatus: "‡≤ä‡≤∞‡≤ú‡≤æ‡≤¶‡≥Å ‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø",
    postMessage: "‡≤®‡≥å‡≤ï‡≤∞‡≤∞‡≤ø‡≤ó‡≥Ü ‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂ ‡≤π‡≤æ‡≤ï‡≤ø",
    enterMessage: "‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≤æ‡≤ï‡≤ø",
    emergencyAlert: "‡≤π‡≥Å‡≤∞‡≤ø‡≤¶‡≥ç‡≤∞‡≤µ‡≤®‡≥Ü ‡≤¶‡≤ø‡≤®‡≤¶ ‡≤≠‡≤∞‡≤µ‡≤∏‡≥Ü",
    emergencyForm: "‡≤ú‡≥ã‡≤∞‡≤æ‡≤ó‡≤ø ‡≤ó‡≤Æ‡≤® ‡≤™‡≤°‡≥Ü‡≤Ø‡≤≤‡≥Å ‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£",
    notifyEmergency: "‡≤π‡≥å‡≤¶‡≥Å, ‡≤∏‡≤Ç‡≤¶‡≤∞‡≥ç‡≤∂‡≤®",
    cancel: "‡≤∞‡≤¶‡≥ç‡≤¶‡≤æ‡≤Ø‡≤ø‡≤∏‡≤≤‡≥Å",
    logout: "‡≤≤‡≤æ‡≤ó‡≥ç ‡≤î‡≤ü‡≥ç",
  }
};

const App = () => {
  const [loggedIn, setLoggedIn] = useState(false);
  const [role, setRole] = useState(""); // "worker" or "supervisor"
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [showEmergencyForm, setShowEmergencyForm] = useState(false);
  const [message, setMessage] = useState("");
  const [language, setLanguage] = useState("english");

  const [data, setData] = useState(initialData);

  const handleLogin = () => {
    // sample authentication logic
    if (username === "worker" && password === "worker123") {
      setRole("worker");
      setLoggedIn(true);
    } else if (username === "supervisor" && password === "supervisor123") {
      setRole("supervisor");
      setLoggedIn(true);
    } else {
      alert("Invalid credentials. Please try again.");
    }
  };

  const handlePostMessage = () => {
    alert(`Message posted to all workers: "${message}"`);
    setMessage("");
  };

  const handleEmergencyNotification = () => {
    alert("üö® Emergency services notified!");
    setShowEmergencyForm(false);
  };

  const handleLogout = () => {
    setLoggedIn(false);
    setRole("");
    setUsername("");
    setPassword("");
    setMessage("");
    setShowEmergencyForm(false);
  };

  return (
    <div className="app-container">
      <div className="language-selection">
        <select onChange={(e) => setLanguage(e.target.value)} value={language}>
          <option value="english">English</option>
          <option value="hindi">‡§π‡§ø‡§Ç‡§¶‡•Ä</option>
          <option value="tamil">‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç</option>
          <option value="malayalam">‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç</option>
          <option value="kannada">‡≤ï‡≤®‡≥ç‡≤®‡≤°</option>
        </select>
      </div>

      {!loggedIn ? (
        <div className="login-container">
          <h1>{translations[language].login}</h1>
          <div>
            <input
              type="text"
              placeholder={translations[language].username}
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="input-field"
            />
          </div>
          <div>
            <input
              type="password"
              placeholder={translations[language].password}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="input-field"
            />
          </div>
          <button onClick={handleLogin} className="login-button">
            {translations[language].login}
          </button>
        </div>
      ) : (
        <div className="dashboard-container">
          <h1>
            {translations[language].welcome}{" "}
            {role === "worker" ? translations[language].worker : translations[language].supervisor}
          </h1>

          {role === "worker" ? (
            <div>
              <h2>{translations[language].currentStatus}</h2>
              <p>{translations[language].temperature}: {data.temperature}¬∞C</p>
              <p>{translations[language].humidity}: {data.humidity}%</p>
              <h3>{translations[language].hazards}:</h3>
              <ul>
                {data.hazards.map((hazard, index) => (
                  <li key={index}>{hazard}</li>
                ))}
              </ul>
              <p>{translations[language].emergencyStatus}: {data.emergencyStatus}</p>
            </div>
          ) : (
            <div>
              <h2>{translations[language].postMessage}</h2>
              <textarea
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder={translations[language].enterMessage}
                rows="4"
                cols="50"
                className="textarea"
              />
              <button onClick={handlePostMessage} className="post-message-button">
                {translations[language].postMessage}
              </button>
              <h3>{translations[language].emergencyAlert}</h3>
              <button
                onClick={() => setShowEmergencyForm(true)}
                className="emergency-button"
              >
                {translations[language].emergencyAlert}
              </button>
            </div>
          )}

          {showEmergencyForm && (
            <div className="emergency-form-container">
              <h2>{translations[language].emergencyForm}</h2>
              <p>{translations[language].notifyEmergency}</p>
              <button
                onClick={handleEmergencyNotification}
                className="yes-btn"
              >
                {translations[language].notifyEmergency}
              </button>
              <button
                onClick={() => setShowEmergencyForm(false)}
                className="cancel-btn"
              >
                {translations[language].cancel}
              </button>
            </div>
          )}

          <button onClick={handleLogout} className="logout-button">
            {translations[language].logout}
          </button>
        </div>
      )}
    </div>
  );
};

export default App;